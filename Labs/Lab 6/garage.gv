// Code generated by Umple 1.22.0.5146

digraph "garage" {
  compound = true;
  size="80,10"

  // Class: Garage

    // Top and Bottom Level StateMachine: Entrance
    
     subgraph clusterGarage_Entrance {
      label = "sm Garage Entrance";
      penwidth=0.5;
        
    // Start states are shown as a black circle
    node [shape = point, fillcolor="black", width=0.2 ];
    start_Garage_Entrance [ tooltip = "Class Garage, SM Entrance, State start" ];
    
        
    // Format for normal states
    node [shape = rectangle, width=1,style=rounded];
    
      // State: Clear

      Garage_Entrance_Clear [label = Clear, tooltip = "Class Garage, SM Entrance, State Clear"];
      // End State: Clear

      // State: Obstructed

      Garage_Entrance_Obstructed [label = Obstructed, tooltip = "Class Garage, SM Entrance, State Obstructed"];
      // End State: Obstructed
    // End Top and Bottom Level StateMachine: Entrance
  }

    // Top and Bottom Level StateMachine: GarageDoor
    
     subgraph clusterGarage_GarageDoor {
      label = "sm Garage GarageDoor";
      penwidth=0.5;
        
    // Start states are shown as a black circle
    node [shape = point, fillcolor="black", width=0.2 ];
    start_Garage_GarageDoor [ tooltip = "Class Garage, SM GarageDoor, State start" ];
    
        
    // Format for normal states
    node [shape = rectangle, width=1,style=rounded];
    
      // State: Closed

      Garage_GarageDoor_Closed [label = Closed, tooltip = "Class Garage, SM GarageDoor, State Closed&#13;Entry:
   stopMotor();&#13;Entry:
   triggerEnergySaveMode();&#13;Exit:
   triggerNormalEnergyMode();"];
      // End State: Closed

      // State: Opening

      Garage_GarageDoor_Opening [label = Opening, tooltip = "Class Garage, SM GarageDoor, State Opening&#13;Entry:
   runMotorForward();"];
      // End State: Opening

      // State: Open

      Garage_GarageDoor_Open [label = Open, tooltip = "Class Garage, SM GarageDoor, State Open&#13;Entry:
   stopMotor();"];
      // End State: Open

      // State: Closing

      Garage_GarageDoor_Closing [label = Closing, tooltip = "Class Garage, SM GarageDoor, State Closing&#13;Entry:
   runMotorInReverse();"];
      // End State: Closing

      // State: Stopped

      Garage_GarageDoor_Stopped [label = Stopped, tooltip = "Class Garage, SM GarageDoor, State Stopped&#13;Entry:
   stopMotor();"];
      // End State: Stopped
    // End Top and Bottom Level StateMachine: GarageDoor
  }

    // Top Level StateMachine: stateMachine1
    
     subgraph clusterGarage_stateMachine1 {
      label = "sm Garage stateMachine1";
      penwidth=0.5;
        
    // Start states are shown as a black circle
    node [shape = point, fillcolor="black", width=0.2 ];
    start_Garage_stateMachine1 [ tooltip = "Class Garage, SM stateMachine1, State start" ];
    
        
    // Format for normal states
    node [shape = rectangle, width=1,style=rounded];
    
      // State: topLevel

     subgraph clusterGarage_stateMachine1_topLevel {
      label = "topLevel";
      style = rounded;

      // Bottom Level StateMachine: topLevel
      
      // Start states are shown as a black circle
      node [shape = point, fillcolor="black", width=0.2 ];
      start_Garage_topLevel [ tooltip = "Class Garage, SM stateMachine1, State topLevel.start" ];
      
            
      // Format for normal states
      node [shape = rectangle, width=1,style=rounded];
      
        // State: thread1

        Garage_stateMachine1TopLevel_thread1 [label = thread1, tooltip = "Class Garage, SM stateMachine1, State topLevel.thread1&#13;Activity:
   System.out.println(&quot;Garage door is now active&quot;);
   pressButton();
   obstruct();
   pressButton();
   clearObstruction();
   ..."];
        // End State: thread1
      // End Bottom Level StateMachine: topLevel
     }
      // End State: topLevel
    // End Top Level StateMachine: stateMachine1
  }

  // All transitions
    start_Garage_Entrance -> Garage_Entrance_Clear [  tooltip = "start to Clear" ] ;
    Garage_Entrance_Obstructed -> Garage_Entrance_Clear [  label = "clearObstruction", tooltip = "From Obstructed to Clear on clearObstruction" ] ;
  
  Garage_Entrance_Clear -> Garage_Entrance_Obstructed [  label = "obstruct", tooltip = "From Clear to Obstructed on obstruct" ] ;
  
  start_Garage_GarageDoor -> Garage_GarageDoor_Closed [  tooltip = "start to Closed" ] ;
    Garage_GarageDoor_Closing -> Garage_GarageDoor_Closed [  label = "closingCompleted", tooltip = "From Closing to Closed on closingCompleted" ] ;
  
  Garage_GarageDoor_Closed -> Garage_GarageDoor_Opening [  label = "pressButton / turnLightOn();", tooltip = "From Closed to Opening on pressButton&#13;Transition Action:
     turnLightOn();" ] ;
  
  Garage_GarageDoor_Closing -> Garage_GarageDoor_Opening [  label = "pressButton / flashLightOn();", tooltip = "From Closing to Opening on pressButton&#13;Transition Action:
     flashLightOn();" ] ;
  
  Garage_GarageDoor_Stopped -> Garage_GarageDoor_Opening [  label = "pressButton [getEntrance().equals(getEntranceFullName().Clear)]", tooltip = "From Stopped to Opening on pressButton&#13;Guard:  [getEntrance().equals(getEntranceFullName().Clear)]" ] ;
  
  Garage_GarageDoor_Opening -> Garage_GarageDoor_Open [  label = "openingCompleted", tooltip = "From Opening to Open on openingCompleted" ] ;
  
  Garage_GarageDoor_Open -> Garage_GarageDoor_Closing [  label = "pressButton [getEntrance().equals(getEntranceFullName().Clear)]", tooltip = "From Open to Closing on pressButton&#13;Guard:  [getEntrance().equals(getEntranceFullName().Clear)]" ] ;
  
  Garage_GarageDoor_Opening -> Garage_GarageDoor_Stopped [  label = "pressButton", tooltip = "From Opening to Stopped on pressButton" ] ;
  
  start_Garage_stateMachine1 -> Garage_stateMachine1TopLevel_thread1 [  lhead=clusterGarage_stateMachine1_topLevel,  tooltip = "start to topLevel" ] ;
    start_Garage_topLevel -> Garage_stateMachine1TopLevel_thread1 [  tooltip = "start to topLevel.thread1" ] ;
  
}
